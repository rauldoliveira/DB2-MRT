/#
/*
CALL NULLID.MRT_PkgCache (2, 5); 
*/
/********************************************************************************************************************************
*********************************************************************************************************************************

    Autor: Raul Diego
    E-mail: raul.oliveira@sicoob.com.br
    Data criação: 24/07/2015
    ->Descrição: MRT que analisa os planos que estao sofrendo alteração no package cache. 
    ->Modo de execuçao: Crie a proc e a execute, informando o tempo de espera entre as execuçoes em segundos e quantas repetiçoes.
 
    Obs.: Assim que for migrado para o 10.5, essa proc devera ser refeita da maneira correta.
 
    Compatibilidade: DB2 LUW 10.1

    Histórico:
        - 00/00/0000: Historico de alteracao

        
*********************************************************************************************************************************
********************************************************************************************************************************/


CREATE OR REPLACE PROCEDURE NULLID.MRT_PkgCache
     (IN v_Wait SMALLINT DEFAULT 5
     ,IN v_Repetition SMALLINT DEFAULT 3)
     
     LANGUAGE SQL
     RESULT SET 1

P1: BEGIN
 
    DECLARE v_RepetitionCount SMALLINT DEFAULT 1;
    
    DECLARE GLOBAL TEMPORARY TABLE SESSION.MRT_PkgCache AS (
        WITH PC AS (
        SELECT DBMS_UTILITY.GET_HASH_VALUE(CAST(SUBSTR(STMT_TEXT,1,300) AS VARCHAR(300)),100,1002400) AS HASH_VALUE
                ,CAST(SUBSTR(STMT_TEXT,1,300) AS VARCHAR(300)) AS CONSULTA
                ,T.*
        FROM  TABLE(MON_GET_PKG_CACHE_STMT ( NULL, NULL, NULL, -2)) T
        )
        SELECT 
                HASH_VALUE , (SELECT CONSULTA FROM PC WHERE C.HASH_VALUE = PC.HASH_VALUE FETCH FIRST 1 ROWS ONLY) AS CONSULTA 
                ,SUM(ROWS_READ) AS ROWS_READ, SUM(ROWS_RETURNED) AS ROWS_RETURNED, SUM(TOTAL_CPU_TIME) AS TOTAL_CPU_TIME, SUM(STMT_EXEC_TIME) AS STMT_EXEC_TIME
                        , SUM(NUM_EXECUTIONS) AS NUM_EXECUTIONS
                ,SUM(TOTAL_ACT_TIME) AS TOTAL_ACT_TIME, SUM(TOTAL_ACT_WAIT_TIME) AS TOTAL_ACT_WAIT_TIME, SUM(TOTAL_SECTION_PROC_TIME) AS TOTAL_SECTION_PROC_TIME
                ,SUM(QUERY_COST_ESTIMATE) AS QUERY_COST_ESTIMATE, SUM(PREP_TIME) AS PREP_TIME
                ,SUM(POOL_READ_TIME + POOL_WRITE_TIME + DIRECT_READ_TIME + DIRECT_WRITE_TIME) AS IO_WAIT_TIME
                ,SUM(POOL_READ_TIME + POOL_DATA_L_READS + POOL_TEMP_DATA_L_READS + POOL_XDA_L_READS + POOL_TEMP_XDA_L_READS + POOL_INDEX_L_READS +
                        POOL_TEMP_INDEX_L_READS + POOL_DATA_GBP_L_READS + POOL_INDEX_GBP_L_READS + POOL_XDA_GBP_L_READS) AS L_READS
                ,SUM(POOL_DATA_P_READS + POOL_TEMP_DATA_P_READS + POOL_XDA_P_READS + POOL_TEMP_XDA_P_READS + POOL_INDEX_P_READS + POOL_TEMP_INDEX_P_READS +
                        POOL_DATA_GBP_P_READS + POOL_INDEX_GBP_P_READS + POOL_XDA_GBP_P_READS) AS P_READS
                ,SUM(POOL_TEMP_DATA_L_READS + POOL_TEMP_XDA_L_READS + POOL_TEMP_INDEX_L_READS + POOL_TEMP_DATA_P_READS + POOL_TEMP_XDA_P_READS + POOL_TEMP_INDEX_P_READS) AS TEMP_READS
                ,SUM(LOCK_WAITS) AS LOCK_WAITS, SUM(LOCK_WAIT_TIME) AS LOCK_WAIT_TIME, SUM(LOCK_ESCALS) AS LOCK_ESCALS, SUM(DEADLOCKS) AS DEADLOCKS, SUM(LOCK_TIMEOUTS) AS LOCK_TIMEOUTS
                        , SUM(LOCK_ESCALS_MAXLOCKS) AS LOCK_ESCALS_MAXLOCKS, SUM(LOCK_ESCALS_LOCKLIST) AS LOCK_ESCALS_LOCKLIST
                ,SUM(TOTAL_SECTION_SORT_TIME) AS TOTAL_SECTION_SORT_TIME, SUM(TOTAL_SECTION_SORT_PROC_TIME) AS TOTAL_SECTION_SORT_PROC_TIME, SUM(TOTAL_SECTION_SORTS) AS TOTAL_SECTION_SORTS
                        , SUM(TOTAL_SORTS) AS TOTAL_SORTS, SUM(SORT_OVERFLOWS) AS SORT_OVERFLOWS
                ,SUM(AUDIT_FILE_WRITE_WAIT_TIME + AUDIT_SUBSYSTEM_WAITS_TOTAL + AUDIT_SUBSYSTEM_WAIT_TIME + DIAGLOG_WRITE_WAIT_TIME + EVMON_WAIT_TIME + EVMON_WAITS_TOTAL) AS ADM_WAITS
                ,SUM(TOTAL_EXTENDED_LATCH_WAIT_TIME) AS TOTAL_EXTENDED_LATCH_WAIT_TIME, SUM(TOTAL_EXTENDED_LATCH_WAITS) AS TOTAL_EXTENDED_LATCH_WAITS, SUM(PREFETCH_WAIT_TIME) AS PREFETCH_WAIT_TIME
                        , SUM(PREFETCH_WAITS) AS PREFETCH_WAITS, SUM(COORD_STMT_EXEC_TIME) AS COORD_STMT_EXEC_TIME, SUM(TQ_SORT_HEAP_REQUESTS) AS TQ_SORT_HEAP_REQUESTS, SUM(TQ_SORT_HEAP_REJECTIONS) AS TQ_SORT_HEAP_REJECTIONS
                 ,CURRENT_TIMESTAMP AS DATAREGISTRO
                ,1 AS RepetitionCount   
        FROM PC AS C
        GROUP BY HASH_VALUE
    ) DEFINITION ONLY
           ON COMMIT DELETE ROWS
           NOT LOGGED ON ROLLBACK DELETE ROWS
           WITH REPLACE;
         
    WHILE v_RepetitionCount <= v_Repetition DO
    
        
        INSERT INTO SESSION.MRT_PkgCache
        WITH PC AS (
        SELECT DBMS_UTILITY.GET_HASH_VALUE(CAST(SUBSTR(STMT_TEXT,1,300) AS VARCHAR(300)),100,1002400) AS HASH_VALUE
                ,CAST(SUBSTR(STMT_TEXT,1,300) AS VARCHAR(300)) AS CONSULTA
                ,T.*
        FROM  TABLE(MON_GET_PKG_CACHE_STMT ( NULL, NULL, NULL, -2)) T
        )
        ,CSUM AS (
        SELECT  
                FLOAT(SUM(ROWS_READ)) AS SUM_ROWS_READ
                ,FLOAT(SUM(TOTAL_CPU_TIME)) AS SUM_TOTAL_CPU_TIME
                ,FLOAT(SUM(STMT_EXEC_TIME)) AS SUM_STMT_EXEC_TIME
                ,FLOAT(SUM(TOTAL_SECTION_SORT_TIME)) AS SUM_TOTAL_SECTION_SORT_TIME
                ,FLOAT(SUM(NUM_EXECUTIONS)) AS SUM_NUM_EXECUTIONS
                ,FLOAT(SUM(POOL_READ_TIME + POOL_WRITE_TIME + DIRECT_READ_TIME + DIRECT_WRITE_TIME)) AS SUM_IO_WAIT_TIME
                ,FLOAT(SUM(POOL_READ_TIME + POOL_DATA_L_READS + POOL_TEMP_DATA_L_READS + POOL_XDA_L_READS + POOL_TEMP_XDA_L_READS + POOL_INDEX_L_READS +
                        POOL_TEMP_INDEX_L_READS + POOL_DATA_GBP_L_READS + POOL_INDEX_GBP_L_READS + POOL_XDA_GBP_L_READS)) AS SUM_L_READS
                ,FLOAT(SUM(POOL_DATA_P_READS + POOL_TEMP_DATA_P_READS + POOL_XDA_P_READS + POOL_TEMP_XDA_P_READS + POOL_INDEX_P_READS + POOL_TEMP_INDEX_P_READS +
                        POOL_DATA_GBP_P_READS + POOL_INDEX_GBP_P_READS + POOL_XDA_GBP_P_READS)) AS SUM_P_READS
                ,FLOAT(SUM(POOL_TEMP_DATA_L_READS + POOL_TEMP_XDA_L_READS + POOL_TEMP_INDEX_L_READS + POOL_TEMP_DATA_P_READS + POOL_TEMP_XDA_P_READS + POOL_TEMP_INDEX_P_READS)) AS SUM_TEMP_READS
        FROM TABLE(MON_GET_PKG_CACHE_STMT ( NULL, NULL, NULL, -2)) AS T
        )
        SELECT 
                HASH_VALUE , (SELECT CONSULTA FROM PC WHERE C.HASH_VALUE = PC.HASH_VALUE FETCH FIRST 1 ROWS ONLY) AS CONSULTA 
                ,SUM(ROWS_READ) AS ROWS_READ, SUM(ROWS_RETURNED) AS ROWS_RETURNED, SUM(TOTAL_CPU_TIME) AS TOTAL_CPU_TIME, SUM(STMT_EXEC_TIME) AS STMT_EXEC_TIME
                        , SUM(NUM_EXECUTIONS) AS NUM_EXECUTIONS
                ,SUM(TOTAL_ACT_TIME) AS TOTAL_ACT_TIME, SUM(TOTAL_ACT_WAIT_TIME) AS TOTAL_ACT_WAIT_TIME, SUM(TOTAL_SECTION_PROC_TIME) AS TOTAL_SECTION_PROC_TIME
                ,SUM(QUERY_COST_ESTIMATE) AS QUERY_COST_ESTIMATE, SUM(PREP_TIME) AS PREP_TIME
                ,SUM(POOL_READ_TIME + POOL_WRITE_TIME + DIRECT_READ_TIME + DIRECT_WRITE_TIME) AS IO_WAIT_TIME
                ,SUM(POOL_READ_TIME + POOL_DATA_L_READS + POOL_TEMP_DATA_L_READS + POOL_XDA_L_READS + POOL_TEMP_XDA_L_READS + POOL_INDEX_L_READS +
                        POOL_TEMP_INDEX_L_READS + POOL_DATA_GBP_L_READS + POOL_INDEX_GBP_L_READS + POOL_XDA_GBP_L_READS) AS L_READS
                ,SUM(POOL_DATA_P_READS + POOL_TEMP_DATA_P_READS + POOL_XDA_P_READS + POOL_TEMP_XDA_P_READS + POOL_INDEX_P_READS + POOL_TEMP_INDEX_P_READS +
                        POOL_DATA_GBP_P_READS + POOL_INDEX_GBP_P_READS + POOL_XDA_GBP_P_READS) AS P_READS
                ,SUM(POOL_TEMP_DATA_L_READS + POOL_TEMP_XDA_L_READS + POOL_TEMP_INDEX_L_READS + POOL_TEMP_DATA_P_READS + POOL_TEMP_XDA_P_READS + POOL_TEMP_INDEX_P_READS) AS TEMP_READS
                ,SUM(LOCK_WAITS) AS LOCK_WAITS, SUM(LOCK_WAIT_TIME) AS LOCK_WAIT_TIME, SUM(LOCK_ESCALS) AS LOCK_ESCALS, SUM(DEADLOCKS) AS DEADLOCKS, SUM(LOCK_TIMEOUTS) AS LOCK_TIMEOUTS
                        , SUM(LOCK_ESCALS_MAXLOCKS) AS LOCK_ESCALS_MAXLOCKS, SUM(LOCK_ESCALS_LOCKLIST) AS LOCK_ESCALS_LOCKLIST
                ,SUM(TOTAL_SECTION_SORT_TIME) AS TOTAL_SECTION_SORT_TIME, SUM(TOTAL_SECTION_SORT_PROC_TIME) AS TOTAL_SECTION_SORT_PROC_TIME, SUM(TOTAL_SECTION_SORTS) AS TOTAL_SECTION_SORTS
                        , SUM(TOTAL_SORTS) AS TOTAL_SORTS, SUM(SORT_OVERFLOWS) AS SORT_OVERFLOWS
                ,SUM(AUDIT_FILE_WRITE_WAIT_TIME + AUDIT_SUBSYSTEM_WAITS_TOTAL + AUDIT_SUBSYSTEM_WAIT_TIME + DIAGLOG_WRITE_WAIT_TIME + EVMON_WAIT_TIME + EVMON_WAITS_TOTAL) AS ADM_WAITS
                ,SUM(TOTAL_EXTENDED_LATCH_WAIT_TIME) AS TOTAL_EXTENDED_LATCH_WAIT_TIME, SUM(TOTAL_EXTENDED_LATCH_WAITS) AS TOTAL_EXTENDED_LATCH_WAITS, SUM(PREFETCH_WAIT_TIME) AS PREFETCH_WAIT_TIME
                        , SUM(PREFETCH_WAITS) AS PREFETCH_WAITS, SUM(COORD_STMT_EXEC_TIME) AS COORD_STMT_EXEC_TIME, SUM(TQ_SORT_HEAP_REQUESTS) AS TQ_SORT_HEAP_REQUESTS, SUM(TQ_SORT_HEAP_REJECTIONS) AS TQ_SORT_HEAP_REJECTIONS
                 ,CURRENT_TIMESTAMP AS DATAREGISTRO
                ,v_RepetitionCount AS RepetitionCount   
        FROM PC AS C
        GROUP BY HASH_VALUE;
    
        SET v_RepetitionCount = v_RepetitionCount + 1;
        
        --CALL NULLID.WAITFOR(v_Wait);
        CALL NULLID.WAITFOR_MRT(v_Wait, 'MRT_PkgCache');
        
        

    END WHILE;    
    
P2: BEGIN

    DECLARE cRet CURSOR WITH RETURN FOR
        --SELECT * FROM SESSION.MRT_PkgCache
        WITH C AS (
        SELECT
                T2.HASH_VALUE
                , T1.DATAREGISTRO AS HoraInicio, T2.DATAREGISTRO AS HoraFim
                --, TO_CHAR(T1.DATAREGISTRO,'HH24:MI:SS') AS HoraInicio, TO_CHAR(T2.DATAREGISTRO,'HH24:MI:SS') AS HoraFim
                , T2.CONSULTA
                , T2.ROWS_READ - T1.ROWS_READ AS ROWS_READ
                , T2.ROWS_RETURNED - T1.ROWS_RETURNED AS ROWS_RETURNED
                , T2.TOTAL_CPU_TIME - T1.TOTAL_CPU_TIME AS TOTAL_CPU_TIME
                , T2.STMT_EXEC_TIME - T1.STMT_EXEC_TIME AS STMT_EXEC_TIME
                , T2.NUM_EXECUTIONS - T1.NUM_EXECUTIONS AS NUM_EXECUTIONS
                , T2.TOTAL_ACT_TIME - T1.TOTAL_ACT_TIME AS TOTAL_ACT_TIME
                , T2.TOTAL_ACT_WAIT_TIME - T1.TOTAL_ACT_WAIT_TIME AS TOTAL_ACT_WAIT_TIME
                , T2.TOTAL_SECTION_PROC_TIME - T1.TOTAL_SECTION_PROC_TIME AS TOTAL_SECTION_PROC_TIME
                , T2.QUERY_COST_ESTIMATE - T1.QUERY_COST_ESTIMATE AS QUERY_COST_ESTIMATE
                , T2.PREP_TIME - T1.PREP_TIME AS PREP_TIME
                , T2.IO_WAIT_TIME - T1.IO_WAIT_TIME AS IO_WAIT_TIME
                , T2.L_READS - T1.L_READS AS L_READS
                , T2.P_READS - T1.P_READS AS P_READS
                , T2.TEMP_READS - T1.TEMP_READS AS TEMP_READS
                , T2.LOCK_WAITS - T1.LOCK_WAITS AS LOCK_WAITS
                , T2.LOCK_WAIT_TIME - T1.LOCK_WAIT_TIME AS LOCK_WAIT_TIME
                , T2.LOCK_ESCALS - T1.LOCK_ESCALS AS LOCK_ESCALS
                , T2.DEADLOCKS - T1.DEADLOCKS AS DEADLOCKS
                , T2.LOCK_TIMEOUTS - T1.LOCK_TIMEOUTS AS LOCK_TIMEOUTS
                , T2.LOCK_ESCALS_MAXLOCKS - T1.LOCK_ESCALS_MAXLOCKS AS LOCK_ESCALS_MAXLOCKS
                , T2.LOCK_ESCALS_LOCKLIST - T1.LOCK_ESCALS_LOCKLIST AS LOCK_ESCALS_LOCKLIST
                , T2.TOTAL_SECTION_SORT_TIME - T1.TOTAL_SECTION_SORT_TIME AS TOTAL_SECTION_SORT_TIME
                , T2.TOTAL_SECTION_SORT_PROC_TIME - T1.TOTAL_SECTION_SORT_PROC_TIME AS TOTAL_SECTION_SORT_PROC_TIME
                , T2.TOTAL_SECTION_SORTS - T1.TOTAL_SECTION_SORTS AS TOTAL_SECTION_SORTS
                , T2.TOTAL_SORTS - T1.TOTAL_SORTS AS TOTAL_SORTS
                , T2.SORT_OVERFLOWS - T1.SORT_OVERFLOWS AS SORT_OVERFLOWS
                , T2.ADM_WAITS - T1.ADM_WAITS AS ADM_WAITS
                , T2.TOTAL_EXTENDED_LATCH_WAIT_TIME - T1.TOTAL_EXTENDED_LATCH_WAIT_TIME AS TOTAL_EXTENDED_LATCH_WAIT_TIME
                , T2.TOTAL_EXTENDED_LATCH_WAITS - T1.TOTAL_EXTENDED_LATCH_WAITS AS TOTAL_EXTENDED_LATCH_WAITS
                , T2.PREFETCH_WAIT_TIME - T1.PREFETCH_WAIT_TIME AS PREFETCH_WAIT_TIME
                , T2.PREFETCH_WAITS - T1.PREFETCH_WAITS AS PREFETCH_WAITS
                , T2.COORD_STMT_EXEC_TIME - T1.COORD_STMT_EXEC_TIME AS COORD_STMT_EXEC_TIME
                , T2.TQ_SORT_HEAP_REQUESTS - T1.TQ_SORT_HEAP_REQUESTS AS TQ_SORT_HEAP_REQUESTS
                , T2.TQ_SORT_HEAP_REJECTIONS - T1.TQ_SORT_HEAP_REJECTIONS AS TQ_SORT_HEAP_REJECTIONS
                ,'REP' || T2.RepetitionCount AS RepetitionCount
        FROM SESSION.MRT_PkgCache T1
        LEFT JOIN SESSION.MRT_PkgCache T2 
                ON T1.HASH_VALUE = T2.HASH_VALUE
                AND T1.RepetitionCount < T2.RepetitionCount
                AND T2.RepetitionCount - T1.RepetitionCount = 1  
        )
        SELECT * 
        FROM C
        WHERE (ROWS_READ <> 0  
                OR ROWS_RETURNED <> 0 OR TOTAL_CPU_TIME <> 0 OR STMT_EXEC_TIME <> 0 
                OR NUM_EXECUTIONS <> 0 OR TOTAL_ACT_TIME <> 0 OR TOTAL_ACT_WAIT_TIME <> 0 OR TOTAL_SECTION_PROC_TIME <> 0 
                OR QUERY_COST_ESTIMATE <> 0 OR PREP_TIME <> 0 OR IO_WAIT_TIME <> 0 OR L_READS <> 0 OR P_READS <> 0 
                OR TEMP_READS <> 0 OR LOCK_WAITS <> 0 OR LOCK_WAIT_TIME <> 0 OR DEADLOCKS <> 0 OR LOCK_TIMEOUTS <> 0 
                OR LOCK_ESCALS_MAXLOCKS <> 0 OR LOCK_ESCALS_LOCKLIST <> 0 OR TOTAL_SECTION_SORT_TIME <> 0 
                OR TOTAL_SECTION_SORT_PROC_TIME <> 0 OR TOTAL_SECTION_SORTS <> 0 OR TOTAL_SORTS <> 0 OR SORT_OVERFLOWS <> 0 
                OR ADM_WAITS <> 0 OR TOTAL_EXTENDED_LATCH_WAIT_TIME <> 0 OR TOTAL_EXTENDED_LATCH_WAITS <> 0 
                OR PREFETCH_WAIT_TIME <> 0 OR PREFETCH_WAITS <> 0 OR COORD_STMT_EXEC_TIME <> 0 OR TQ_SORT_HEAP_REQUESTS <> 0 
                OR TQ_SORT_HEAP_REJECTIONS <> 0) 
        ;
    
    OPEN cReT;
    
END P2;
END P1

--  CALL NULLID.MRT_PkgCache ();
--  CALL NULLID.MRT_PkgCache (1, 10); 

#/    



SELECT SQLSIGDB2('SELECT * FROM dbo.T1 WHERE col1 = 3 AND col2 > 78', 3000) FROM SYSIBM.SYSDUMMY1;


SELECT SQLSIGDB2(STMT_TEXT, 3000) 
FROM TABLE(MON_GET_PKG_CACHE_STMT (NULL, NULL,NULL, -1)) AS T FETCH FIRST 10 ROWS ONLY;


 SELECT STMT_TEXT, SQLSIGDB2(STMT_TEXT,5000) AS CORRIGIDA 
 FROM  TABLE(MON_GET_PKG_CACHE_STMT ( NULL, NULL, NULL, -2)) T 
 WHERE STMT_PKG_CACHE_ID = 6949257216000
 
 SELECT STMT_PKG_CACHE_ID, STMT_TEXT, CAST(STMT_TEXT AS VARCHAR(2000)) AS STMT_TEXT_VARCHAR 
 FROM  TABLE(MON_GET_PKG_CACHE_STMT ( NULL, NULL, NULL, -2)) T 
 
 WITH PC AS (
        SELECT DBMS_UTILITY.GET_HASH_VALUE(SQLSIGDB2(STMT_TEXT, 5000),100,1002400) AS HASH_VALUE
                ,SQLSIGDB2(STMT_TEXT, 5000) AS CONSULTA
                ,T.*
        FROM  TABLE(MON_GET_PKG_CACHE_STMT ( NULL, NULL, NULL, -2)) T
        )
        SELECT 
                HASH_VALUE , (SELECT CONSULTA FROM PC WHERE C.HASH_VALUE = PC.HASH_VALUE FETCH FIRST 1 ROWS ONLY) AS CONSULTA 
                ,SUM(ROWS_READ) AS ROWS_READ, SUM(ROWS_RETURNED) AS ROWS_RETURNED, SUM(TOTAL_CPU_TIME) AS TOTAL_CPU_TIME, SUM(STMT_EXEC_TIME) AS STMT_EXEC_TIME
                        , SUM(NUM_EXECUTIONS) AS NUM_EXECUTIONS
                ,SUM(TOTAL_ACT_TIME) AS TOTAL_ACT_TIME, SUM(TOTAL_ACT_WAIT_TIME) AS TOTAL_ACT_WAIT_TIME, SUM(TOTAL_SECTION_PROC_TIME) AS TOTAL_SECTION_PROC_TIME
                ,SUM(QUERY_COST_ESTIMATE) AS QUERY_COST_ESTIMATE, SUM(PREP_TIME) AS PREP_TIME
                ,SUM(POOL_READ_TIME + POOL_WRITE_TIME + DIRECT_READ_TIME + DIRECT_WRITE_TIME) AS IO_WAIT_TIME
                ,SUM(POOL_READ_TIME + POOL_DATA_L_READS + POOL_TEMP_DATA_L_READS + POOL_XDA_L_READS + POOL_TEMP_XDA_L_READS + POOL_INDEX_L_READS +
                        POOL_TEMP_INDEX_L_READS + POOL_DATA_GBP_L_READS + POOL_INDEX_GBP_L_READS + POOL_XDA_GBP_L_READS) AS L_READS
                ,SUM(POOL_DATA_P_READS + POOL_TEMP_DATA_P_READS + POOL_XDA_P_READS + POOL_TEMP_XDA_P_READS + POOL_INDEX_P_READS + POOL_TEMP_INDEX_P_READS +
                        POOL_DATA_GBP_P_READS + POOL_INDEX_GBP_P_READS + POOL_XDA_GBP_P_READS) AS P_READS
                ,SUM(POOL_TEMP_DATA_L_READS + POOL_TEMP_XDA_L_READS + POOL_TEMP_INDEX_L_READS + POOL_TEMP_DATA_P_READS + POOL_TEMP_XDA_P_READS + POOL_TEMP_INDEX_P_READS) AS TEMP_READS
                ,SUM(LOCK_WAITS) AS LOCK_WAITS, SUM(LOCK_WAIT_TIME) AS LOCK_WAIT_TIME, SUM(LOCK_ESCALS) AS LOCK_ESCALS, SUM(DEADLOCKS) AS DEADLOCKS, SUM(LOCK_TIMEOUTS) AS LOCK_TIMEOUTS
                        , SUM(LOCK_ESCALS_MAXLOCKS) AS LOCK_ESCALS_MAXLOCKS, SUM(LOCK_ESCALS_LOCKLIST) AS LOCK_ESCALS_LOCKLIST
                ,SUM(TOTAL_SECTION_SORT_TIME) AS TOTAL_SECTION_SORT_TIME, SUM(TOTAL_SECTION_SORT_PROC_TIME) AS TOTAL_SECTION_SORT_PROC_TIME, SUM(TOTAL_SECTION_SORTS) AS TOTAL_SECTION_SORTS
                        , SUM(TOTAL_SORTS) AS TOTAL_SORTS, SUM(SORT_OVERFLOWS) AS SORT_OVERFLOWS
                ,SUM(AUDIT_FILE_WRITE_WAIT_TIME + AUDIT_SUBSYSTEM_WAITS_TOTAL + AUDIT_SUBSYSTEM_WAIT_TIME + DIAGLOG_WRITE_WAIT_TIME + EVMON_WAIT_TIME + EVMON_WAITS_TOTAL) AS ADM_WAITS
                ,SUM(TOTAL_EXTENDED_LATCH_WAIT_TIME) AS TOTAL_EXTENDED_LATCH_WAIT_TIME, SUM(TOTAL_EXTENDED_LATCH_WAITS) AS TOTAL_EXTENDED_LATCH_WAITS, SUM(PREFETCH_WAIT_TIME) AS PREFETCH_WAIT_TIME
                        , SUM(PREFETCH_WAITS) AS PREFETCH_WAITS, SUM(COORD_STMT_EXEC_TIME) AS COORD_STMT_EXEC_TIME, SUM(TQ_SORT_HEAP_REQUESTS) AS TQ_SORT_HEAP_REQUESTS, SUM(TQ_SORT_HEAP_REJECTIONS) AS TQ_SORT_HEAP_REJECTIONS
                 ,CURRENT_TIMESTAMP AS DATAREGISTRO
                ,1 AS RepetitionCount   
        FROM PC AS C
        GROUP BY HASH_VALUE
        
        
        
/*
###################################################################################################################################
###################################################################################################################################
###################################################################################################################################
*/

SELECT SQLSIGDB2('INSERT INTO DLO.MEMORIACALCULODLO 
					(IDVARIAVEL, IDACOMPANHAMENTODLO, IDPROCESSAMENTOARQUIVODLO, IDDOCUMENTO, CODORIGEM, DESCVALORVARIAVEL, 
					 DESCINFORMACAO, DESCFORMULAVARIAVEL, DESCFORMULAVARIAVELFORMATADA, BOLERRO , DATAHORAINCLUSAO, IDUSUARIO) 
				VALUES 
				    (745437 ,21335 ,41797 ,545, ''DLO'', ''Variveis Simples ==> 0.00'', 
				     ''112.93.05 - EXCESSO DE DEDUO DE INVESTIMENTO EM OUTRAS ENTIDADES NO CAPITAL CO'', ''(112.93.05.01 * -1)'', ''(0.00 * -1.00)'', 0, ''2015-10-30 11:20:19'', ''JOELM0001_00'')', 3000)
FROM SYSIBM.SYSDUMMY1;

SELECT SQLSIGDB2(CAST('SELECT * FROM WHERE ABC = ''¡BC''' AS VARCHAR(3000) CCSID ASCII),3000) FROM SYSIBM.SYSDUMMY1;
SELECT SQLSIGDB2(CAST('¡' AS VARCHAR(3000) CCSID ASCII),3000) FROM SYSIBM.SYSDUMMY1;


SELECT SQLSIGDB2('SELECT * FROM WHERE ABC = ''ABC''' ,3000) FROM SYSIBM.SYSDUMMY1;
SELECT SQLSIGDB2('SELECT * FROM WHERE ABC = ''DEF''' ,3000) FROM SYSIBM.SYSDUMMY1;
SELECT SQLSIGDB2('SELECT * FROM WHERE ABC = ''¡BC''' ,3000) FROM SYSIBM.SYSDUMMY1;

SELECT SQLSIGDB2('¡' ,3000) FROM SYSIBM.SYSDUMMY1;


translate(upper('AAAA'),'AAAEEEIIIOOOUUU','¡¿ƒ…»ÀÕÃœ”“÷⁄Ÿ‹') =


SELECT * FROM SYSIBM.SYSDUMMY1;
SELECT translate(upper('AAAA'),'AAAEEEIIIOOOUUU','¡¿ƒ…»ÀÕÃœ”“÷⁄Ÿ‹') AS T FROM SYSIBM.SYSDUMMY1;

SELECT TRANSLATE('·a', 'È', '·') as t FROM SYSIBM.SYSDUMMY1; --aqui esta a chave do problema, single-bit for double-bit
SELECT TRANSLATE('·a', 'C', '·') as t FROM SYSIBM.SYSDUMMY1; --aqui esta a chave do problema, single-bit for double-bit
SELECT DECODE('·',·,'a') AS T FROM SYSIBM.SYSDUMMY1

SELECT CAST('·' AS VARCHAR(10) FOR MIXED DATA) AS T FROM SYSIBM.SYSDUMMY1;

SELECT DECODE(CAST('·' AS VARCHAR(10) FOR MIXED DATA),·,'a') AS T FROM SYSIBM.SYSDUMMY1

SELECT TRANSLATE(CAST('¡' AS VARCHAR(10) FOR MIXED DATA), 'È', '·') as t FROM SYSIBM.SYSDUMMY1;

SELECT GRAPHIC('AA¡A') FROM SYSIBM.SYSDUMMY1;

SELECT UPPER('¡AA¡') FROM SYSIBM.SYSDUMMY1
SELECT UCASE('¡AA¡') FROM SYSIBM.SYSDUMMY1

SELECT TRANSLATE(VARCHAR_FORMAT('AA¡A'), 'B', '¡') AS T FROM SYSIBM.SYSDUMMY1;

SELECT DECODE(VARCHAR_FORMAT('AA¡A', ¡, 'A') AS T FROM SYSIBM.SYSDUMMY1;

SELECT UPPER('aa·a','en_US', CODEUNITS32) AS T FROM SYSIBM.SYSDUMMY1

SELECT UPPER('aa·a','en_US', CODEUNITS32) AS T FROM SYSIBM.SYSDUMMY1

/*
en_US
de_DE
fr_FR
tr_TR
*/

SELECT TRANSLATE(UCASE('b'),UCASE('b'),UCASE('·')) FROM SYSIBM.SYSDUMMY1;

upper('')


DECODE(c1, ·, 'a', È, 'e', Ì, 'i', Û, 'o', ˙, 'u', Á, 'c', ¡, 'A', …, 'E', Õ, 'I', ”, 'O', ⁄, 'U', «, 'C')

WITH C AS (
        SELECT 'CCCC' AS T FROM SYSIBM.SYSDUMMY1
)
SELECT T, DECODE(T, C, 'D') AS C --DECODE(T, ·, 'a', È, 'e', Ì, 'i', Û, 'o', ˙, 'u', Á, 'c', ¡, 'A', …, 'E', Õ, 'I', ”, 'O', ⁄, 'U', «, 'C') 
FROM C

SELECT DECODE('AAA', ·, 'a', È, 'e', Ì, 'i', Û, 'o', ˙, 'u', Á, 'c', ¡, 'A', …, 'E', Õ, 'I', ”, 'O', ⁄, 'U', «, '«') FROM SYSIBM.SYSDUMMY1;

SELECT CAST('A¡' AS VARCHAR(10) CCSID)





/*
###################################################################################################################################
###################################################################################################################################
###################################################################################################################################
*/


SELECT UPPER('aa·a','ch_EN', CODEUNITS32) AS T FROM SYSIBM.SYSDUMMY1;

SELECT COLLATION_KEY_BIT('A¡¡AA', 'UCA400R1_LFR') AS T FROM SYSIBM.SYSDUMMY1;

SELECT HEX(COLLATION_KEY_BIT('a', 'UCA400R1_LFR')) AS T FROM SYSIBM.SYSDUMMY1;
SELECT CAST(COLLATION_KEY_BIT('A¡¡AA', 'UCA400R1_LFR') AS VARCHAR(10) FOR BIT DATA) AS T FROM SYSIBM.SYSDUMMY1;

select VARCHAR_BIT_FORMAT(HEX('·')) from sysibm.sysdummy1;

SELECT VARGRAPHIC('¡') AS T FROM SYSIBM.SYSDUMMY1;

SELECT TRANSLATE(CAST('¡' AS VARGRAPHIC), CAST('¡' AS VARGRAPHIC), CAST('¡' AS VARGRAPHIC))as t 
FROM SYSIBM.SYSDUMMY1; 

SELECT TRANSLATE(VARCHAR_BIT_FORMAT(HEX('Aa')), VARCHAR_BIT_FORMAT(HEX('C')), VARCHAR_BIT_FORMAT(HEX('¡'))) as t 
FROM SYSIBM.SYSDUMMY1; 

SELECT HEX('¡') FROM SYSIBM.SYSDUMMY1;
select cast(hex('·') as varchar(10)) from sysibm.sysdummy1;
select x'41' from sysibm.sysdummy1;
select x'C3A1' FROM SYSIBM.SYSDUMMY1;

select 

SELECT DECODE('·',·,'a') AS T FROM SYSIBM.SYSDUMMY1

SELECT CAST(COLLATION_KEY_BIT('A', 'UCA400R1_LFR') AS CHAR(10) FOR SBCS DATA) FROM SYSIBM.SYSDUMMY1;
SELECT CAST(COLLATION_KEY_BIT('A', 'UCA400R1_LFR') AS CHAR(10) FOR DBCS DATA) FROM SYSIBM.SYSDUMMY1;
SELECT CAST(COLLATION_KEY_BIT('A', 'UCA400R1_LFR') AS CHAR(10) FOR MIXED DATA) FROM SYSIBM.SYSDUMMY1;
SELECT CAST(COLLATION_KEY_BIT('A', 'UCA400R1_LFR') AS VARCHAR(10)) FROM SYSIBM.SYSDUMMY1;
SELECT COLLATION_KEY_BIT('A', 'UCA400R1_LFR') FROM SYSIBM.SYSDUMMY1;
SELECT VARCHAR_BI(COLLATION_KEY_BIT('A', 'UCA400R1_LFR')) FROM SYSIBM.SYSDUMMY1;

VALUES CAST(VARCHAR_BIT_FORMAT(HEX('abcdefg'))AS VARCHAR(10)FOR MIXED DATA)

SELECT CAST(VARCHAR_BIT_FORMAT(COLLATION_KEY_BIT('A', 'UCA400R1_LFR')) AS VARCHAR(10) FOR MIXED DATA) 
FROM SYSIBM.SYSDUMMY1;

SELECT TRANSLATE(CAST(VARCHAR_BIT_FORMAT(COLLATION_KEY_BIT('¡', 'UCA400R1_LFR')) AS VARCHAR(10) FOR MIXED DATA) 
                , CAST(VARCHAR_BIT_FORMAT(COLLATION_KEY_BIT('C', 'UCA400R1_LFR')) AS VARCHAR(10) FOR MIXED DATA)
                , CAST(VARCHAR_BIT_FORMAT(COLLATION_KEY_BIT('¡', 'UCA400R1_LFR')) AS VARCHAR(10) FOR MIXED DATA))                 
AS T FROM SYSIBM.SYSDUMMY1;


VALUES(VARCHAR_BIT_FORMAT('ef01abC9'));

SELECT COLLATION_KEY_BIT('A', 'UCA400R1_LFR') FROM SYSIBM.SYSDUMMY1;
SELECT CAST(COLLATION_KEY_BIT('¡', 'UCA400R1_LFR') AS VARCHAR(10) FOR MIXED DATA) FROM SYSIBM.SYSDUMMY1;
SELECT CAST(VARCHAR_BIT_FORMAT(HEX('¡')) AS VARCHAR(10) FOR MIXED DATA) FROM SYSIBM.SYSDUMMY1;




SELECT CAST('¡' AS VARCHAR(10) FOR BIT DATA) AS T FROM SYSIBM.SYSDUMMY1

SELECT CAST('A' AS VARCHAR(10000) FOR BIT DATA) FROM SYSIBM.SYSDUMMY1;

CAST (<forbitdataexpression> AS [VARCHAR|CHAR][(<n>)] FOR [SBCS|DBCS] DATA)





/*
###################################################################################################################################
###################################################################################################################################
###################################################################################################################################
*/
